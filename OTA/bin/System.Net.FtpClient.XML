<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Net.FtpClient</name>
    </assembly>
    <members>
        <member name="T:System.Net.FtpClient.Proxy.ProxyType">
            <summary>
            Specifies the type of proxy servers used by an instance of the ProxySocket class.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.Proxy.ProxyType.None">
            <summary>
            No proxy server. ProxySocket will behave like a normal Socket.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.Proxy.ProxyType.Socks4">
            <summary>
            A SOCKS4 proxy server.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.Proxy.ProxyType.Socks4a">
            <summary>
            A SOCKS4A proxy server.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.Proxy.ProxyType.Socks5">
            <summary>
            A SOCKS5 proxy server.
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpTransferInfo">
            <summary>
            Provides upload / download progress information
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpTransferInfo.#ctor(System.Net.FtpClient.FtpTransferType,System.String,System.Int64,System.Int64,System.Int64,System.DateTime,System.Boolean)">
            <summary>
            Iniatlize the FtpTransferInfo object
            </summary>
            <param name="type">Upload or download</param>
            <param name="file">Remote object path</param>
            <param name="length">Size of the object in bytes</param>
            <param name="resume">Bytes resumed (if this was a resume)</param>
            <param name="transferred">Bytes transfered</param>
            <param name="start">The time the transfer started</param>
            <param name="complete">Value indicating if the transfer is complete</param>
        </member>
        <member name="P:System.Net.FtpClient.FtpTransferInfo.TransferType">
            <summary>
            Indicates if the transfer is an upload or download
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpTransferInfo.FileName">
            <summary>
            The full path to remote file
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpTransferInfo.Length">
            <summary>
            The total number of bytes to be transferred
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpTransferInfo.Resume">
            <summary>
            Gets the location the download was resumed at
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpTransferInfo.Transferred">
            <summary>
            The number of bytes transferred
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpTransferInfo.Percentage">
            <summary>
            Percentage of the transfer that has been completed
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpTransferInfo.Start">
            <summary>
            The start time of the transfer
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpTransferInfo.Now">
            <summary>
            The current time used for calculating bps
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpTransferInfo.BytesPerSecond">
            <summary>
            Transfer average
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpTransferInfo.Complete">
            <summary>
            Gets a value indicating if the transfer is complete
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpTransferInfo.Cancel">
            <summary>
            Cancels the transfer
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpChannelConnected">
            <summary>
            Delegate for event
            </summary>
            <param name="c"></param>
        </member>
        <member name="T:System.Net.FtpClient.FtpChannelDisconnected">
            <summary>
            Delegate for event
            </summary>
            <param name="c"></param>
        </member>
        <member name="T:System.Net.FtpClient.FtpChannelDisposed">
            <summary>
            Delegate for event
            </summary>
            <param name="c"></param>
        </member>
        <member name="T:System.Net.FtpClient.FtpInvalidCertificate">
            <summary>
            Delegate for event
            </summary>
            <param name="c"></param>
            <param name="e"></param>
        </member>
        <member name="T:System.Net.FtpClient.FtpAsyncInvoker">
            <summary>
            Delegate for asynchronous connections
            </summary>
            <returns></returns>
        </member>
        <member name="T:System.Net.FtpClient.FtpChannel">
            <summary>
            Base class for Ftp*Channel implementations
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpChannel.OnConnectionReady">
            <summary>
            Fire ConnectionReady event
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpChannel.OnConnectionClosed">
            <summary>
            Fire ConnectionClosed event
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpChannel.OnDisposed">
            <summary>
            Fire Disposed event
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpChannel.OnInvalidSslCerticate(System.Net.FtpClient.FtpChannel,System.Net.FtpClient.InvalidCertificateInfo)">
            <summary>
            Fire the invalid SSL certificate event
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpChannel.CheckCertificate(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            Checks if a certificate is valid
            </summary>
            <param name="sender"></param>
            <param name="certificate"></param>
            <param name="chain"></param>
            <param name="sslPolicyErrors"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpChannel.AuthenticateConnection">
            <summary>
            Authenticates the SSL certificate. This should be called when the stream is switched over
            to encryption.
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpChannel.Connect">
            <summary>
            Connect this channel
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpChannel.BeginConnect">
            <summary>
            Connect asynchronously
            </summary>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpChannel.BeginConnect(System.Object)">
            <summary>
            Connect asynchronously
            </summary>
            <param name="state"></param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpChannel.BeginConnect(System.AsyncCallback,System.Object)">
            <summary>
            Connect asynchronously
            </summary>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpChannel.EndConnect(System.IAsyncResult)">
            <summary>
            End connection
            </summary>
            <param name="result">IAsyncResult returned from BeginConnect()</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpChannel.InternalDisconnect">
            <summary>
            ???? Should this method be private?
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpChannel.Disconnect">
            <summary>
            Disconnect the socket and free up any resources being used here
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpChannel.Dispose">
            <summary>
            Cleanup and release resources
            </summary>
        </member>
        <member name="E:System.Net.FtpClient.FtpChannel.ConnectionReady">
            <summary>
            Event is fired after a connection has been made
            </summary>
        </member>
        <member name="E:System.Net.FtpClient.FtpChannel.ConnectionClosed">
            <summary>
            Event is fired when Disconnect is called
            </summary>
        </member>
        <member name="E:System.Net.FtpClient.FtpChannel.Disposed">
            <summary>
            Event is fired when this object is disposed.
            </summary>
        </member>
        <member name="E:System.Net.FtpClient.FtpChannel.InvalidCertificate">
            <summary>
            Event is fired when an invalid SSL certificate is encountered.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.IsServerSocket">
            <summary>
            Indicates if this is an incoming (active) or outgoing channel (passive)
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.SslEnabled">
            <summary>
            Gets a value indicating if encryption is in use
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.SslPolicyErrors">
            <summary>
            Gets the SSL errors if there were any
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.SslCertificate">
            <summary>
            Gets the certificate associated with the current connection
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.ProxyType">
            <summary>
            The proxy server type used for the connection.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.ProxyHost">
            <summary>
            The proxy server address.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.ProxyPort">
            <summary>
            The proxy server port.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.ProxyUsername">
            <summary>
            The proxy server username used to connect.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.ProxyPassword">
            <summary>
            The proxy server password used to connect.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.Socket">
            <summary>
            Connection
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.ReceiveBufferSize">
            <summary>
            Default buffer size of the underlying socket
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.SendBufferSize">
            <summary>
            Default buffer size of the underlying socket
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.LocalEndPoint">
            <summary>
            Local end point
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.RemoteEndPoint">
            <summary>
            Remote end point
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.Connected">
            <summary>
            Indicates if there is an active connection
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.ReadTimeout">
            <summary>
            Gets/Sets the read timeout
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.WriteTimeout">
            <summary>
            Gets/Sets the write timeout
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.NetworkStream">
            <summary>
            The base stream used for reading and writing the socket
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.SslAuthTargetHost">
            <summary>
            Gets the host to use for ssl certificate authentication
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.SecurteStream">
            <summary>
            Gets a secure stream to the socket.
            Intended to be used with the AUTH SSL command
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.BaseStream">
            <summary>
            The base stream for reading and writing the socket
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.StreamReader">
            <summary>
            Used for easy reading from the socket
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.Server">
            <summary>
            The FTP server to connect to
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.Port">
            <summary>
            The port the FTP server is listening on
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpChannel.AsyncConnect">
            <summary>
            Gets an FtpAsyncInvoker object for asynchronous
            connections
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpListFormatParser">
            <summary>
            Map's regex group index's to the appropriate
            fields in the parser results.
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpListFormatParser.Parse(System.String)">
            <summary>
            Parse the given string
            </summary>
            <param name="input"></param>
            <returns>Returns true on success, false on failure</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpListFormatParser.#ctor(System.Text.RegularExpressions.Regex,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Net.FtpClient.FtpObjectType)">
            <summary>
            Creates a new instance of the FtpListParser object and sets
            the given index locations as specified.
            </summary>
            <param name="re"></param>
            <param name="nameIndex"></param>
            <param name="sizeIndex"></param>
            <param name="modifyIndex"></param>
            <param name="modeIndex"></param>
            <param name="ownerIndex"></param>
            <param name="groupIndex"></param>
            <param name="linkPathIndex"></param>
            <param name="type"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpListFormatParser.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Net.FtpClient.FtpObjectType)">
            <summary>
            Creates a new instance of the FtpListParser object and sets
            the given index locations as sepcified.
            </summary>
            <param name="regex"></param>
            <param name="nameIndex"></param>
            <param name="sizeIndex"></param>
            <param name="modifyIndex"></param>
            <param name="modeIndex"></param>
            <param name="ownerIndex"></param>
            <param name="groupIndex"></param>
            <param name="linkPathIndex"></param>
            <param name="type"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpListFormatParser.Dispose">
            <summary>
            Cleans up this format parser
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListFormatParser.ObjectType">
            <summary>
            The type of objec this parser is for (File or Directory)
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListFormatParser.Name">
            <summary>
            The name of the object. A null value is returned when this information is not available.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListFormatParser.NameIndex">
            <summary>
            The index in the match group collection where the object name can be found after
            a successfull parse. Setting a less than 1 value indicates that this field is not available.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListFormatParser.Size">
            <summary>
            The size of the object. 0 is returned when this information is not available.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListFormatParser.SizeIndex">
            <summary>
            The index in the match group collection where the object name can be found after
            a successfull parse. Setting a less than 1 value indicates that this field is not available.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListFormatParser.Modify">
            <summary>
            The last write time of the object. DateTime.MinValue is returned when this information
            is not available.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListFormatParser.ModifyIndex">
            <summary>
            The index in the match group collection where the object name can be found after
            a successfull parse. Setting a less than 1 value indicates that this field is not available.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListFormatParser.Mode">
            <summary>
            The mode of the object. null is return when this information is not available.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListFormatParser.ModeIndex">
            <summary>
            The index of the match group collection where the object mode can be found after
            a successful parse. Setting a less than 1 value indicates that this field is not available.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListFormatParser.Owner">
            <summary>
            The owner of the object. null is return when this information is not available.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListFormatParser.OwnerIndex">
            <summary>
            The index of the match group collection where the object owner can be found after
            a successful parse. Setting a less than 1 value indicates that this field is not available.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListFormatParser.Group">
            <summary>
            The group of the object. null is return when this information is not available.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListFormatParser.GroupIndex">
            <summary>
            The index of the match group collection where the object group can be found after
            a successful parse. Setting a less than 1 value indicates that this field is not available.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListFormatParser.LinkPath">
            <summary>
            The link path of the object in case it is a symlink. null is return when this information is not available.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListFormatParser.LinkPathIndex">
            <summary>
            The index of the match group collection where the object link path can be found afet
            a successful parse. Setting a less than 1 value indicates that this field is not available.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListFormatParser.Match">
            <summary>
            The match result after calling the Parse() method.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListFormatParser.Regex">
            <summary>
            The regex used to parse the input string.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListFormatParser.Parsers">
            <summary>
            Gets a collection of FtpListParser objects for parsing various
            listing formats. 
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.InvalidCertificateInfo">
            <summary>
            Invalid SSL certification event arguments
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.InvalidCertificateInfo.#ctor(System.Net.FtpClient.FtpChannel)">
            <summary>
            Iniatlizes the object
            </summary>
            <param name="c">The ftp channel this object is associated with. Could
            be FtpControlConnection or FtpDataChannel</param>
        </member>
        <member name="P:System.Net.FtpClient.InvalidCertificateInfo.Ignore">
            <summary>
            Gets or sets a value indicating if the invalid certificate should be ignored.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.InvalidCertificateInfo.SslPolicyErrors">
            <summary>
            The problems encountered with the certificate
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.InvalidCertificateInfo.SslCertificate">
            <summary>
            The SSL certificate that failed verification
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.ResponseReceived">
            <summary>
            ResponseReceived delegate
            </summary>
            <param name="status">Status number</param>
            <param name="response">Status message</param>
        </member>
        <member name="T:System.Net.FtpClient.SecurityNotAvailable">
            <summary>
            SecurityNotAvailable delegate
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:System.Net.FtpClient.CustomLogMessage">
            <summary>
            Custom log message delegate
            </summary>
            <param name="originalMessage"></param>
            <returns></returns>
        </member>
        <member name="T:System.Net.FtpClient.FtpControlConnection">
            <summary>
            The communication channel for the FTP server / used for issuing commands
            and controlling transactions.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpControlConnection.mCommandLock">
            <summary>
            Mutex used for locking the command channel while
            executing commands
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpControlConnection.LockControlConnection">
            <summary>
            Acquire an exclusive lock on the command channel
            while executing/processing commands
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpControlConnection.LockControlConnection(System.Int32)">
            <summary>
            Acquire an exclusive lock on the command channel
            while executing/processing commands 
            </summary>
            <param name="timeout"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpControlConnection.UnlockControlConnection">
            <summary>
            Release the exclusive lock held on the command channel
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpControlConnection.OnResponseReceived(System.String,System.String)">
            <summary>
            Fires the response received event.
            </summary>
            <param name="status">Status code</param>
            <param name="response">Status message</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpControlConnection.ReadLine">
            <summary>
            Reads a line from the FTP channel socket. Use with discretion,
            can cause the code to freeze if you're trying to read data when no data
            is being sent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpControlConnection.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads bytes off the socket
            </summary>
            <param name="buf"></param>
            <param name="offset"></param>
            <param name="size"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpControlConnection.Write(System.Byte[])">
            <summary>
            Writes the specified byte array to the network stream
            </summary>
            <param name="buf"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpControlConnection.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the specified byte array to the network stream
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpControlConnection.WriteLine(System.String,System.Object[])">
            <summary>
            Writes a line to the channel with the correct line endings.
            </summary>
            <param name="line">Format</param>
            <param name="args">Parameters</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpControlConnection.WriteLine(System.String)">
            <summary>
            Writes a line to the channel with the correct line endings.
            </summary>
            <param name="line">The line to write</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpControlConnection.Write(System.String,System.Object[])">
            <summary>
            Writes the specified data to the network stream in the proper encoding
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpControlConnection.Write(System.String)">
            <summary>
            Writes the specified data to the network stream in the proper encoding
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpControlConnection.PollConnection">
            <summary>
            Attempts to check our connectivity to the server
            with using Socket.Poll
            </summary>
            <returns>True if connected, false otherwise</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpControlConnection.BeginExecute">
            <summary>
            Starts a new pipeline of commands
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpControlConnection.EndExecute">
            <summary>
            Executes all of the commands in the pipeline list
            </summary>
            <returns>An array of FtpCommandResult objects. The order of the objects relates
            to the order that commands were executed.</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpControlConnection.CancelPipeline">
            <summary>
            Cancels the current pipeline
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpControlConnection.Execute(System.String[])">
            <summary>
            Pipeline the given commands on the server
            </summary>
            <param name="commands">If null value is passed, no attempt to execute is made but an attempt
            to performan a response read will be made regardless.</param>
            <returns>An array of FtpCommandResults</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpControlConnection.Execute(System.String,System.Object[])">
            <summary>
            Executes a command on the server
            </summary>
            <param name="cmd"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpControlConnection.Execute(System.String)">
            <summary>
            Executes a command on the server. If there is a pipeline in progress
            the command is queued and true is returned.
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpControlConnection.ReadResponse">
            <summary>
            Reads and parses the response a command that was executed. Do not call this
            unless you just executed a command, will cause code to freeze waiting for the
            server to send data that is never comming.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpControlConnection.Connect(System.String,System.Int32)">
            <summary>
            Open a connection
            </summary>
            <param name="host"></param>
            <param name="port"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpControlConnection.Connect(System.Net.IPAddress,System.Int32)">
            <summary>
            Open a connection
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpControlConnection.Connect(System.Net.IPEndPoint)">
            <summary>
            Open a connection
            </summary>
            <param name="ipep"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpControlConnection.HasCapability(System.Net.FtpClient.FtpCapability)">
            <summary>
            Checks if the server supports the specified capability
            </summary>
            <param name="cap"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpControlConnection.RemoveCapability(System.Net.FtpClient.FtpCapability)">
            <summary>
            Removes the specified capability from the list
            </summary>
            <param name="cap"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpControlConnection.LoadCapabilities">
            <summary>
            Loads the capabilities of this server
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpControlConnection.GetFileSize(System.String)">
            <summary>
            Gets the size of the specified file. If there are any errors getting the file size, 0 will be returned
            rather than throwing an exception, even if the file doesn't exist.
            </summary>
            <param name="path">The full or relative (to the current working directory) path</param>
            <returns>The file size, 0 if there was a problem executing the command or parsing the size</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpControlConnection.SetDataType(System.Net.FtpClient.FtpDataType)">
            <summary>
            Set the data type for the data channel
            </summary>
            <param name="datatype"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpControlConnection.SetDataMode(System.Net.FtpClient.FtpDataMode)">
            <summary>
            Set the transfer mode for the data channel. If block
            mode is requested and it fails, stream mode is
            automatically used.
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpControlConnection.OpenDataStream">
            <summary>
            Opens a binary data stream
            </summary>
            <returns>A stream that can be read or written depending on the type of transaction, but not both.</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpControlConnection.OpenDataStream(System.Net.FtpClient.FtpDataType)">
            <summary>
            Opens a data stream using the data format specified
            </summary>
            <param name="type">Data format to use</param>
            <returns>A stream that can be read or written depending on the type of transaction, but not both.</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpControlConnection.OpenFile(System.String,System.Net.FtpClient.FtpFileAccess)">
            <summary>
            Opens a stream to the specified file on the server
            </summary>
            <param name="path">The full or relative path to the file</param>
            <param name="access">Read, write or append to the file. Append ignores the offset parameter. Use read or write accordingly if you want to open the file to a specific location.</param>
            <returns>A non seekable stream to the file.</returns>
            <example>
                This example attempts to illustrate a stream based file download.
                <code source="..\Examples\DownloadStream\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpControlConnection.OpenFile(System.String,System.Net.FtpClient.FtpFileAccess,System.Int64)">
            <summary>
            Opens a stream to the specified file on the server
            </summary>
            <param name="path">The full or relative path to the file</param>
            <param name="access">Read, write or append to the file. Append ignores the offset parameter. Use read or write accordingly if you want to open the file to a specific location.</param>
            <param name="offset">Starting position of the stream. Please note this parameter is ignored for FtpFileAccess.Append.</param>
            <returns>A non seekable stream to the file.</returns>
            <example>
                This example attempts to illustrate a stream based file download.
                <code source="..\Examples\DownloadStream\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpControlConnection.OpenFile(System.String,System.Net.FtpClient.FtpDataType,System.Net.FtpClient.FtpFileAccess)">
            <summary>
            Opens a stream to the specified file on the server
            </summary>
            <param name="path">The full or relative path to the file</param>
            <param name="type">ASCII/Binary</param>
            <param name="access">Starting position of the stream. Please note this parameter is ignored for FtpFileAccess.Append.</param>
            <returns>A non seekable stream to the file.</returns>
            <example>
                This example attempts to illustrate a stream based file download.
                <code source="..\Examples\DownloadStream\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpControlConnection.OpenFile(System.String,System.Net.FtpClient.FtpDataType,System.Net.FtpClient.FtpFileAccess,System.Int64)">
            <summary>
            Opens a stream to the specified file on the server
            </summary>
            <param name="path">The full or relative path to the file</param>
            <param name="type">ASCII/Binary</param>
            <param name="access">Read, write or append to the file. Append ignores the offset parameter. Use read or write accordingly if you want to open the file to a specific location.</param>
            <param name="offset">Starting position of the stream. Please note this parameter is ignored for FtpFileAccess.Append.</param>
            <returns>A non seekable stream to the file.</returns>
            <example>
                This example attempts to illustrate a stream based file download.
                <code source="..\Examples\DownloadStream\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpControlConnection.Disconnect">
            <summary>
            Terminates ftp session and cleans up the resources
            being used.
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpControlConnection.OnInitalizedConnection(System.Net.FtpClient.FtpChannel)">
            <summary>
            Upon the initial connection, we will be presented with a banner and status
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpControlConnection.Login">
            <summary>
            This is the login event handler. It performs the FTP login
            if a connection to the server has been made.
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpControlConnection.#ctor">
            <summary>
            Initalize a new command channel object.
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpControlConnection.WriteToLogStream(System.String)">
            <summary>
            Writes a message to the FTP log stream
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpControlConnection.WriteLineToLogStream(System.String)">
            <summary>
            Writes a line to the FTP log stream
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:System.Net.FtpClient.FtpControlConnection.Username">
            <summary>
            The username to authenticate with
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpControlConnection.Password">
            <summary>
            The password to authenticate with
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpControlConnection.KeepAliveInterval">
            <summary>
            Sets an interval in seconds to send keep-alive commands to the server
            during data transfers. This should not be required, it's 
            not even outline in RFC959. The server should not close the
            control connection, if it does it's a bug. With that said
            it does happen so this feature is there to help work around
            it in cases where the server cannot be upgraded. It is a last
            ditch effort and unsupported. If it doesn't solve your problem
            then contact the administrator of the server where the timeout
            occurs and ask them to upgrade their software.
            
            A setting of 0 (default) disables this feature. Do not set the value
            too low, I recommend starting at about 15 seconds.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpControlConnection.ResponseReadTimeout">
            <summary>
            Gets or sets the maximum time in miliseconds in which the control
            connection will wait for the server to respond to a command. If the
            timeout is exceeded a FtpResponseTimeoutExecption will be thrown.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpControlConnection.SslMode">
            <summary>
            Sets the type of SSL to use. The default is Explicit, meaning SSL is negotiated
            after the initial connection, before credentials are sent.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpControlConnection.DataChannelEncryption">
            <summary>
            Enable or disable data channel encryption. This option is only
            applicable when the SslMode property is set to use encryption.
            The default value is true.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpControlConnection.EnablePipelining">
            <summary>
            Gets / sets a value indicating if we can use pipelining techniques
            to talk to the server. If the server allows it, this will help
            improve performance on the command channel with large command transactions.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpControlConnection.IsUTF8Enabled">
            <summary>
            Gets a value indicating if UTF8 has been enabled
            on this connection
            </summary>
        </member>
        <member name="E:System.Net.FtpClient.FtpControlConnection.SecurityNotAvailable">
            <summary>
            Event is fired when the AUTH command fails for
            explicit SSL connections. A cancel property is
            provided to allow you to abort the connection.
            </summary>
        </member>
        <member name="E:System.Net.FtpClient.FtpControlConnection.ResponseReceived">
            <summary>
            Event is fired when a message is received from the server. Useful
            for logging the conversation with the server.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpControlConnection.Capabilities">
            <summary>
            Capabilities of the server
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpControlConnection.CurrentDataType">
            <summary>
            Gets the current data type. This value is updated with the SetDataType() method
            is called. It is used to avoid the overheaded of executing the command on the 
            server when the specified type is already set.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpControlConnection.DataChannelType">
            <summary>
            The default data channel type to use (default: ExtendedPassive)
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpControlConnection.ResponseType">
            <summary>
            The type of response received from the last command executed
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpControlConnection.ResponseCode">
            <summary>
            The status code of the response
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpControlConnection.ResponseMessage">
            <summary>
            The message, if any, that the server sent with the response
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpControlConnection.Messages">
            <summary>
            Other informational messages sent from the server
            that are not considered part of the response
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpControlConnection.ResponseStatus">
            <summary>
            General success or failure of the last command executed
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpControlConnection.DataChannelReadTimeout">
            <summary>
            Gets or sets the time in miliseconds that a data channel will
            wait for the server to responde before throwing an IOException
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpControlConnection.LastSocketActivity">
            <summary>
            Gets a the last time data was read or written to the socket.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpControlConnection.NeedsSocketPoll">
            <summary>
            Returns true if the last socket poll was 30 seconds ago. The last poll
            time gets updated every time data is read or written to the socket.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpControlConnection.MaxPipelineExecute">
            <summary>
            Gets or sets the maximum number of commands that can be
            executed at a time in a pipeline. Once this number is exceeded,
            execution stops and the responses are read. The process repeats
            itself until all of the pending commands have been executed. Setting
            this value to 0 means there is no limit.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpControlConnection.ExecuteList">
            <summary>
            Gets a list of commands in the current pipeline
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpControlConnection.PipelineInProgress">
            <summary>
            Gets a value indicating if a pipeline has been started
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpControlConnection.LogMessage">
            <summary>
            Custom log message delegate
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpControlConnection.FtpLogStream">
            <summary>
            Gets or sets a stream to log FTP transactions to. Can be
            used for logging to a file, the console window, or what have you.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpControlConnection.FtpLogFlushOnWrite">
            <summary>
            Gets or sets a value that indicates if the
            output stream should be flushed everytime
            a log enter is written to it.
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpControlConnection.GetLineFromSocket">
            <summary>
            Delegate used for read response timeout
            </summary>
            <returns></returns>
        </member>
        <member name="T:System.Net.FtpClient.FtpResponseType">
            <summary>
            The type of response the server responded with
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpResponseType.None">
            <summary>
            No response
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpResponseType.PositivePreliminary">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpResponseType.PositiveCompletion">
            <summary>
            Successs
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpResponseType.PositiveIntermediate">
            <summary>
            Succcess
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpResponseType.TransientNegativeCompletion">
            <summary>
            Temporary failure
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpResponseType.PermanentNegativeCompletion">
            <summary>
            Permanent failure
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpDataChannelType">
            <summary>
            The of data channel to be used
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpDataChannelType.Active">
            <summary>
            PORT Command
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpDataChannelType.ExtendedActive">
            <summary>
            EPRT Command
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpDataChannelType.Passive">
            <summary>
            PASV Command
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpDataChannelType.ExtendedPassive">
            <summary>
            EPSV Command
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpDataType">
            <summary>
            Transfer data over data channel in ASCII or binary.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpDataType.ASCII">
            <summary>
            Transfer data as ASCII
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpDataType.Binary">
            <summary>
            Transfer data as binary
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpDataMode">
            <summary>
            Indicates the mode to use for transfering
            data between the client and server.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpDataMode.Stream">
            <summary>
            Default, opens a socket, transfers data and
            socket is closed to indicate eof. Can leave a lot
            of sockets in linger state on large transfers.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpDataMode.Block">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpDataStructure">
            <summary>
            The type of structure to use when transferring the file.
            Currently only file structure is supported, others will
            be added as necessary.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpDataStructure.File">
            <summary>
            Default, no special structure, sequential bytes
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpListType">
            <summary>
            The list command to be used on the server
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpListType.LIST">
            <summary>
            Standard hard to parse file listing
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpListType.MLSD">
            <summary>
            Newer easier to parse file listing
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpListType.MLST">
            <summary>
            Newer easier to parse file listing that returns info on a single
            object over the command channel (no data channel required)
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpCapability">
            <summary>
            Server features
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpCapability.EMPTY">
            <summary>
            Features haven't been loaded yet
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpCapability.NONE">
            <summary>
            This server said it doesn't support anything!
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpCapability.MLST">
            <summary>
            Supports the MLST command
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpCapability.MLSD">
            <summary>
            Supports the MLSD command
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpCapability.SIZE">
            <summary>
            Supports the SIZE command
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpCapability.MDTM">
            <summary>
            Supports the MDTM command
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpCapability.REST">
            <summary>
            Supports download/upload stream resumes
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpCapability.EPSV">
            <summary>
            Supports the EPSV command
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpCapability.EPRT">
            <summary>
            Supports the EPRT command
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpCapability.MDTMDIR">
            <summary>
            Supports retrieving modification times on directories
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpCapability.UTF8">
            <summary>
            Supports for UTF8
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpCapability.PRET">
            <summary>
            PRET Command used in distributed ftp server software DrFTPD
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpProtocolType">
            <summary>
            Indicate if we're using IPv4 or IPv6
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpProtocolType.IPV4">
            <summary>
            Use IPv4
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpProtocolType.IPV6">
            <summary>
            Use IPv6 (this is not used anywhere in the code as of right now). It's reserved
            for the future when IPv6 finally replaces IPv4
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpObjectType">
            <summary>
            File system object type
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpObjectType.Directory">
            <summary>
            A directory.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpObjectType.File">
            <summary>
            A file.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpObjectType.Link">
            <summary>
            A symbolic link.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpObjectType.Device">
            <summary>
            A device.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpObjectType.Unknown">
            <summary>
            No idea.
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpTransferType">
            <summary>
            Indicates if the transfer in progress is an upload or a download
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpTransferType.Upload">
            <summary>
            The transfer is an upload.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpTransferType.Download">
            <summary>
            The transfer is a download.
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpSslMode">
            <summary>
            Indicates the type of SSL connection to use, if any.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpSslMode.None">
            <summary>
            Do not use SSL
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpSslMode.Explicit">
            <summary>
            A SSL or TLS session is negotiated after the initial
            unencrypted connection, before credentials are sent.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpSslMode.Implicit">
            <summary>
            SSL/TLS is implied upon the initial connection.
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpPermission">
            <summary>
            Permission flags, identical to UNIX file system permissions
            1 = X
            2 = W
            4 = R
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpPermission.None">
            <summary>
            No permissions!?!?!
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpPermission.Execute">
            <summary>
            Set executable bit
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpPermission.Write">
            <summary>
            Set writeable bit
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpPermission.Read">
            <summary>
            Set readable bit
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpPermission.ReadWrite">
            <summary>
            Set the readable and writable bits
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpPermission.ReadExecute">
            <summary>
            Set the readable and executable bits
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpPermission.ReadWriteExecute">
            <summary>
            Set the readable, writeable and executable bits
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpFileAccess">
            <summary>
            Desired file access mode
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpFileAccess.Read">
            <summary>
            Read the file
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpFileAccess.Write">
            <summary>
            Write to a file
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpFileAccess.Append">
            <summary>
            Append to the file
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpDirectory">
            <summary>
            Represents a directory on a FTP server
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpFileSystemObject">
            <summary>
            Base class for remote file system objects
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpFileSystemObject._length">
            <summary>
            The size of the object, -1 means it hasn't been loaded.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.FtpFileSystemObject._lastWriteTime">
            <summary>
            The last write time of the object. DateTime.MinValue means
            that is hasn't been loaded.
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpFileSystemObject.GetInfo">
            <summary>
            Tries to load the object information
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpFileSystemObject.CleanPath(System.String)">
            <summary>
            Fixes directory separators
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpFileSystemObject.ToString">
            <summary>
            Returns the full path of this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpFileSystemObject.Dispose">
            <summary>
            Cleanup an release resources
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpFileSystemObject.#ctor">
            <summary>
            Base constructor
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpFileSystemObject.#ctor(System.Net.FtpClient.FtpClient,System.String)">
            <summary>
            Create new object lined to the specified client and pointing at the specified path
            </summary>
            <param name="client">The client to link this objec to</param>
            <param name="path">The full path of the remote object</param>
        </member>
        <member name="P:System.Net.FtpClient.FtpFileSystemObject.Client">
            <summary>
            The FtpClient object this directory is associated with
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpFileSystemObject.Name">
            <summary>
            The name of this object
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpFileSystemObject.FullName">
            <summary>
            The full or relative path of this directory on the server
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpFileSystemObject.Length">
            <summary>
            Gets the file system size of this object if
            applicable.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpFileSystemObject.LastWriteTime">
            <summary>
            Last modification time
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpDirectory.ClearListing">
            <summary>
            Clears the file listing results
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpDirectory.Create">
            <summary>
            Creates this directory on the server. Exception thrown 
            if the directory already exists.
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpDirectory.Delete(System.Net.FtpClient.FtpFile)">
            <summary>
            Deletes the specified file and removes it from the list of files in this
            directory if it's there
            </summary>
            <param name="file"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpDirectory.Delete(System.Net.FtpClient.FtpDirectory)">
            <summary>
            Deletes the specified directory and removes it from the list of directories
            in this directory if it's there
            </summary>
            <param name="dir"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpDirectory.Delete(System.Net.FtpClient.FtpDirectory,System.Boolean)">
            <summary>
            Deletes the specified directory and removes it from the list of directories
            in this directory if it's there
            </summary>
            <param name="dir"></param>
            <param name="recursive"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpDirectory.Delete">
            <summary>
            Delete this directory, throw exception if not empty.
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpDirectory.Delete(System.Boolean)">
            <summary>
            Delete this directory and all files and directories beneath it
            </summary>
            <param name="recursive"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpDirectory.DirectoryExists(System.String)">
            <summary>
            Checks if the specified directory exists. Will fail
            if the server doesn't support MLST
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpDirectory.FileExists(System.String)">
            <summary>
            Checks if the specified file exists. Will fail
            if the server doesn't support MLST
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpDirectory.CreateDirectory(System.String)">
            <summary>
            Creates the specified sub directory
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpDirectory.LoadListing">
            <summary>
            Loads the file and directory listing
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpDirectory.Dispose">
            <summary>
            Clean up this object and release all of it's resources.
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpDirectory.#ctor(System.Net.FtpClient.FtpClient,System.String)">
            <summary>
            Initialize a new object representing a directory on the FTP server
            </summary>
            <param name="cl">The client this directory will be associated with</param>
            <param name="path">The full path of the object on the server</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpDirectory.#ctor(System.Net.FtpClient.FtpClient,System.Net.FtpClient.FtpDirectory,System.Net.FtpClient.FtpListItem)">
            <summary>
            Initialize a new object representing a directory on the FTP server
            </summary>
            <param name="cl">The client this object is associated with</param>
            <param name="parent">The parent directory (if any)</param>
            <param name="listing">The file listing object that was parsed to get this object's data</param>
        </member>
        <member name="P:System.Net.FtpClient.FtpDirectory.Exists">
            <summary>
            Gets a value indicating if this directory exists on the server
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpDirectory.Length">
            <summary>
            Directory size will always be 0.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpDirectory.LastWriteTime">
            <summary>
            Last modification time
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpDirectory.Directories">
            <summary>
            A list of directories within this directory
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpDirectory.Files">
            <summary>
            A list of files within this directory
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpDirectory.Parent">
            <summary>
            Gets the parent directory. If this is the top level directory, this property will be null.
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.Proxy.Socks5Proxy">
            <summary>
            Implements the SOCKS5 protocol.
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.Proxy.ProxyBase">
            <summary>
            Implements the SOCKS protocol. This is an abstract class; it must be inherited.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.Proxy.ProxyBase.socket">
            <summary>
            The socket value.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.Proxy.ProxyBase.username">
            <summary>
            The proxy server username.
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.Proxy.ProxyBase.#ctor(System.Net.Sockets.Socket,System.String)">
            <summary>
            Initializes a new instance of the ProxyBase class.
            </summary>
            <param name="socket">The socket connection with the proxy server.</param>
            <param name="username">The username used to connect to the proxy server.</param>
        </member>
        <member name="M:System.Net.FtpClient.Proxy.ProxyBase.Connect(System.String,System.Int32)">
            <summary>
            Connects to the remote host through the SOCKS proxy server.
            </summary>
            <param name="host">The remote server to connect to.</param>
            <param name="port">The remote port to connect to.</param>
        </member>
        <member name="M:System.Net.FtpClient.Proxy.ProxyBase.GetPortBytes(System.Int32)">
            <summary>
            Converts a port number to an array of bytes.
            </summary>
            <param name="port">The port number to convert.</param>
            <returns>An array of two bytes representing the port number.</returns>
        </member>
        <member name="M:System.Net.FtpClient.Proxy.ProxyBase.Read(System.Int32)">
            <summary>
            Reads a number of bytes from the proxy server.
            </summary>
            <param name="number">The number of bytes to read.</param>
            <returns>An array of bytes containing the proxy server response.</returns>
        </member>
        <member name="P:System.Net.FtpClient.Proxy.ProxyBase.Socket">
            <summary>
            Gets or sets the socket connection with the proxy server.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.Proxy.ProxyBase.Username">
            <summary>
            Gets or sets the username used to connect to the proxy server.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.Proxy.Socks5Proxy.Socks5VersionNumber">
            <summary>
            The SOCKS5 version number.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.Proxy.Socks5Proxy.Socks5Reserved">
            <summary>
            The SOCKS5 reserved field value.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.Proxy.Socks5Proxy.Socks5AddressTypeIPv4">
            <summary>
            The SOCKS5 IPv4 address type.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.Proxy.Socks5Proxy.Socks5AddressTypeDomainName">
            <summary>
            The SOCKS5 Domain name address type.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.Proxy.Socks5Proxy.Socks5AddressTypeIPv6">
            <summary>
            The SOCKS5 IPv6 address type.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.Proxy.Socks5Proxy.Socks5NoAuthentication">
            <summary>
            Indicates that the SOCKS5 proxy server doesn't need authentication.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.Proxy.Socks5Proxy.Socks5Authentication">
            <summary>
            Indicates that the SOCKS5 proxy server need a username/password authentication.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.Proxy.Socks5Proxy.Socks5AuthenticateCommandSucceed">
            <summary>
            The authentication command success code.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.Proxy.Socks5Proxy.password">
            <summary>
            The password used to connect to the proxy server.
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.Proxy.Socks5Proxy.#ctor(System.Net.Sockets.Socket,System.String,System.String)">
            <summary>
            Initializes a new instance of the Socks5Proxy class.
            </summary>
            <param name="socket">The socket connectio with the proxy server.</param>
            <param name="username">The username used to connect to the proxy server.</param>
            <param name="password">The password used to connect to the proxy server.</param>
        </member>
        <member name="M:System.Net.FtpClient.Proxy.Socks5Proxy.Connect(System.String,System.Int32)">
            <summary>
            Connects to the remote host through the SOCKS proxy server.
            </summary>
            <param name="host">The remote server to connect to.</param>
            <param name="port">The remote port to connect to.</param>
        </member>
        <member name="M:System.Net.FtpClient.Proxy.Socks5Proxy.Authenticate">
            <summary>
            Authenticates to the proxy server.
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.Proxy.Socks5Proxy.Connect(System.Byte[])">
            <summary>
            Connects to the remote host through the SOCKS proxy server.
            </summary>
            <param name="connect">The bytes to send when trying to connect.</param>
        </member>
        <member name="M:System.Net.FtpClient.Proxy.Socks5Proxy.GetHostType(System.String)">
            <summary>
            Gets the SOCKS5 host type from the host name or IP address.
            </summary>
            <param name="host">The host name or IP address from which we need the type.</param>
            <returns>The corresponding SOCKS5 type.</returns>
        </member>
        <member name="M:System.Net.FtpClient.Proxy.Socks5Proxy.GetAddressBytes(System.Byte,System.String)">
            <summary>
            Gets the SOCKS5 address bytes, depending on the address type.
            </summary>
            <param name="addressType">The address type.</param>
            <param name="host">The host name or IP address.</param>
            <returns>An array of bytes representing the host.</returns>
        </member>
        <member name="M:System.Net.FtpClient.Proxy.Socks5Proxy.GetConnectCommand(System.String,System.Int32)">
            <summary>
            Creates an array of bytes representing the SOCKS5 proxy server connect command.
            See http://www.ietf.org/rfc/rfc1928.txt
            </summary>
            <param name="host">The host name or IP address to connect to.</param>
            <param name="port">The port number to connect to.</param>
            <returns>An array of bytes representing the connect command for the specified host/port combination.</returns>
        </member>
        <member name="M:System.Net.FtpClient.Proxy.Socks5Proxy.GetUsernameBytes">
            <summary>
            Converts the username to an array of bytes used to authenticate the user.
            </summary>
            <returns>An array of bytes representing the username.</returns>
        </member>
        <member name="M:System.Net.FtpClient.Proxy.Socks5Proxy.GetPasswordBytes">
            <summary>
            Converts the password to an array of bytes used to authenticate the user.
            </summary>
            <returns>An array of bytes representing the password.</returns>
        </member>
        <member name="M:System.Net.FtpClient.Proxy.Socks5Proxy.GetAuthenticateCommand">
            <summary>
            Creates an array of bytes representing the SOCKS5 proxy server authenticate command.
            See http://www.ietf.org/rfc/rfc1928.txt
            </summary>
            <returns>An array of bytes representing the authenticate command for the specified username/password combination.</returns>
        </member>
        <member name="P:System.Net.FtpClient.Proxy.Socks5Proxy.Password">
            <summary>
            Gets or sets the password used to connect to the proxy server.
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpTraceListener">
            <summary>
            Adds a trace lister for System.Net.FtpClient output 
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpTransferProgress">
            <summary>
            FtpTransferProgress delegate
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:System.Net.FtpClient.FtpClient">
            <summary>
            FtpClient library
            </summary>
            <example>
                This example attempts to illustrate a file download.
                <code source="..\Examples\Download\Program.cs" lang="cs"></code>
            </example>
            <example>
                This example attempts to illustrate a stream based file download.
                <code source="..\Examples\DownloadStream\Program.cs" lang="cs"></code>
            </example>
            <example>
                This example attempts to illustrate a file upload.
                <code source="..\Examples\Upload\Program.cs" lang="cs"></code>
            </example>
            <example>
                This example attempts to illustrate file listings
                <code source="..\Examples\ListingFiles\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Connect(System.String,System.String)">
            <summary>
            Connect using the specified username and password
            </summary>
            <param name="username"></param>
            <param name="password"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Connect(System.String,System.String,System.String)">
            <summary>
            Connect using the specified username and password to the specified server
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <param name="server"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Connect(System.String,System.String,System.String,System.Int32)">
            <summary>
            Connect using the specified username and password to the specified server on the specified port
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <param name="server"></param>
            <param name="port"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginConnect(System.String,System.String)">
            <summary>
            Connect asynchronously using the specified username and password
            </summary>
            <param name="username"></param>
            <param name="password"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginConnect(System.String,System.String,System.String)">
            <summary>
            Connect asynchronously using the specified username and password to the specified server
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <param name="server"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginConnect(System.String,System.String,System.String,System.Int32)">
            <summary>
            Connect asynchronously using the specified username and password to the specified server on the specified port
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <param name="server"></param>
            <param name="port"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginConnect(System.AsyncCallback,System.Object,System.String,System.String)">
            <summary>
            Connect to the server asynchronously
            </summary>
            <param name="callback"></param>
            <param name="state"></param>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginConnect(System.AsyncCallback,System.Object,System.String,System.String,System.String)">
            <summary>
            Connect to the server asynchronously
            </summary>
            <param name="callback"></param>
            <param name="state"></param>
            <param name="username"></param>
            <param name="password"></param>
            <param name="server"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginConnect(System.AsyncCallback,System.Object,System.String,System.String,System.String,System.Int32)">
            <summary>
            Connect to the server asynchronously
            </summary>
            <param name="callback"></param>
            <param name="state"></param>
            <param name="username"></param>
            <param name="password"></param>
            <param name="server"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.NoOp">
            <summary>
            Sends the NoOp command. Does nothing other than send a command to the
            server and get a response.
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.GetRawListing">
            <summary>
            Gets a raw directory listing of the current working directory. Prefers
            the MLSD command to LIST if it's available.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.GetRawListing(System.String)">
            <summary>
            Returns a raw file listing, preferring to use the MLSD command
            over LIST if it is available
            </summary>
            <param name="path">The full or relative (to the current working directory) path</param>
            <returns>string array of the raw listing</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.GetRawListing(System.String,System.Net.FtpClient.FtpListType)">
            <summary>
            Returns a raw file listing using the specified LIST type
            </summary>
            <param name="path">The full or relative (to the current working directory) path</param>
            <param name="type"></param>
            <returns>string array of the raw listing</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.GetListing">
            <summary>
            Gets a file listing, parses it, and returns an array of FtpListItem 
            objects that contain the parsed information. Supports MLSD/LIST (DOS and UNIX) formats.
            Most people should use the FtpDirectory/FtpFile classes which have more features than
            the objects returned from this method.
            </summary>
            <returns></returns>
            <example>
                This example attempts to illustrate file listings
                <code source="..\Examples\ListingFiles\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.GetListing(System.String)">
            <summary>
            Gets a file listing, parses it, and returns an array of FtpListItem 
            objects that contain the parsed information. Supports MLSD/LIST (DOS and UNIX) formats.
            Most people should use the FtpDirectory/FtpFile classes which have more features than
            the objects returned from this method.
            </summary>
            <param name="path"></param>
            <returns></returns>
            <example>
                This example attempts to illustrate file listings
                <code source="..\Examples\ListingFiles\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.GetListing(System.String,System.Net.FtpClient.FtpListType)">
            <summary>
            Gets a file listing, parses it, and returns an array of FtpListItem 
            objects that contain the parsed information. Supports MLSD/LIST (DOS and UNIX) formats.
            Most people should use the FtpDirectory/FtpFile classes which have more features than
            the objects returned from this method. Please note that Date/Time formats in LIST
            style listings vary greatly. We try to parse the last write time but we make no
            guarntee that it will succeed. If the FtpListItem.Modify == DateTime.MinValue it
            means the parsers failed. You can then use FtpClient.GetLastWriteTime() to try to
            retrieve the modification time. In some edge cases the parsed date from LIST formats may 
            be incorrect. If you encounter such a case please report it to the developers and include
            a copy of the raw listing that produced the invalid dates. If you care about the accuracy
            of the last write time and you know LIST is being used instead of MLSD you should use
            FtpClient.GetLastWriteTime to load the modification time. Example:
            
            if(!client.HasCapability(FtpCapability.MLSD) {
              listItem.Modify = client.GetLastWriteTime(full_or_relative_path_to_file);
            };
            </summary>
            <param name="path"></param>
            <param name="type"></param>
            <returns></returns>
            <example>
                This example attempts to illustrate file listings
                <code source="..\Examples\ListingFiles\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.SetPermissions(System.String,System.Net.FtpClient.FtpPermission,System.Net.FtpClient.FtpPermission,System.Net.FtpClient.FtpPermission)">
            <summary>
            Set permissions on the specified object using the chmod command. Some server may not
            support chmod so be prepared to handle the subsequent FtpCommandException that may 
            be thrown.
            </summary>
            <param name="path">Path of the object to change the permissions on</param>
            <param name="user">Permissions for the user that owns the object</param>
            <param name="group">Permissions for the group the object belongs to</param>
            <param name="others">Permissions for other users on the system</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.SetPermissions(System.String,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Set permissions on the specified object using the chmod command. Some server may not
            support chmod so be prepared to handle the subsequent FtpCommandException that may 
            be thrown.
            </summary>
            <param name="path">Path of the object to change the permissions on</param>
            <param name="user">Permissions for the user that owns the object</param>
            <param name="group">Permissions for the group the object belongs to</param>
            <param name="others">Permissions for other users on the system</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.SetPermissions(System.String,System.String)">
            <summary>
            Set permissions on the specified object using the chmod command. Some server may not
            support chmod so be prepared to handle the subsequent FtpCommandException that may 
            be thrown.
            </summary>
            <param name="path">Path of the object to change the permissions on</param>
            <param name="mode">3 digit mode of the object</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.SetWorkingDirectory(System.String)">
            <summary>
            Changes the current working directory
            </summary>
            <param name="path">The full or relative (to the current directory) path</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.GetLastWriteTime(System.String)">
            <summary>
            Gets the last write time if the server supports the MDTM command. If the
            server does not support the MDTM NotImplementedException is thrown.
            </summary>
            <param name="path">The full or relative (to the current working directory) path</param>
            <returns>DateTime/DateTime.MinValue if there was a problem parsing the date</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.ParseLastWriteTime(System.String)">
            <summary>
            Parses the last write time values from the server
            </summary>
            <param name="mdtm">The string value to parse</param>
            <returns>A DateTime object representing what was parsed, DateTime.MinValue if there was a failure</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.RemoveDirectory(System.String)">
            <summary>
            Removes the specified directory
            </summary>
            <param name="path">The full or relative (to the current working directory) path</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.RemoveFile(System.String)">
            <summary>
            Removes the specified file
            </summary>
            <param name="path">The full or relative (to the current working directory) path</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.CreateDirectory(System.String)">
            <summary>
            Creates the specified directory
            </summary>
            <param name="path">The full or relative (to the current working directory) path</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.GetObjectInfo(System.String)">
            <summary>
            Gets an FTP list item representing the specified file system object
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.DirectoryExists(System.String)">
            <summary>
            Checks if the specified directory exists
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.FileExists(System.String)">
            <summary>
            Checks if the specified file exists
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Rename(System.String,System.String)">
            <summary>
            Renames the specified object
            </summary>
            <param name="from">The full or relative (to the current working directory) path of the existing file</param>
            <param name="to">The full or relative (to the current working directory) path of the new file</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenRead(System.String)">
            <summary>
            Opens a file for reading. If you want the file size, be sure to retrieve
            it before attempting to open a file on the server.
            </summary>
            <param name="path">The full or relative (to the current working directory) path</param>
            <returns>FtpDataChannel used for reading the data stream. Be sure to disconnect when finished.</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenRead(System.String,System.Int64)">
            <summary>
            Opens a file for reading. If you want the file size, be sure to retrieve
            it before attempting to open a file on the server.
            </summary>
            <param name="path">The full or relative (to the current working directory) path</param>
            <param name="rest">Resume location, if specified and server doesn't support REST STREAM, a NotImplementedException is thrown</param>
            <returns>FtpDataChannel used for reading the data stream. Be sure to disconnect when finished.</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenRead(System.String,System.Net.FtpClient.FtpDataType)">
            <summary>
            Opens a file for reading. If you want the file size, be sure to retrieve
            it before attempting to open a file on the server.
            </summary>
            <param name="path">The full or relative (to the current working directory) path</param>
            <param name="datatype">ASCII/Binary</param>
            <returns>FtpDataChannel used for reading the data stream. Be sure to disconnect when finished.</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenRead(System.String,System.Net.FtpClient.FtpDataType,System.Int64)">
            <summary>
            Opens a file for reading. If you want the file size, be sure to retrieve
            it before attempting to open a file on the server.
            </summary>
            <param name="path">The full or relative (to the current working directory) path</param>
            <param name="datatype">ASCII/Binary</param>
            <param name="rest">Resume location, if specified and server doesn't support REST STREAM, a NotImplementedException is thrown</param>
            <returns>FtpDataChannel used for reading the data stream. Be sure to disconnect when finished.</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenWrite(System.String)">
            <summary>
            Opens a file for writing. If you want the file size, be sure to retrieve
            it before attempting to open a file on the server.
            </summary>
            <param name="path">The full or relative (to the current working directory) path</param>
            <returns>FtpDataStream used for writing to the remote file. Be sure to dispose this object when done.</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenWrite(System.String,System.Int64)">
            <summary>
            Opens a file for writing. If you want the file size, be sure to retrieve
            it before attempting to open a file on the server.
            </summary>
            <param name="path">The full or relative (to the current working directory) path</param>
            <param name="rest">Resume location, if specified and server doesn't support REST STREAM, a NotImplementedException is thrown</param>
            <returns>FtpDataStream used for writing to the remote file. Be sure to dispose this object when done.</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenWrite(System.String,System.Net.FtpClient.FtpDataType)">
            <summary>
            Opens a file for writing. If you want the file size, be sure to retrieve
            it before attempting to open a file on the server.
            </summary>
            <param name="path">The full or relative (to the current working directory) path</param>
            <param name="datatype">ASCII/Binary</param>
            <returns>FtpDataStream used for writing to the remote file. Be sure to dispose this object when done.</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenWrite(System.String,System.Net.FtpClient.FtpDataType,System.Int64)">
            <summary>
            Opens a file for writing. If you want the existing file size, be sure to retrieve
            it before attempting to open a file on the server.
            </summary>
            <param name="path">The full or relative (to the current working directory) path</param>
            <param name="datatype">ASCII/Binary</param>
            <param name="rest">Resume location, if specified and server doesn't support REST STREAM, a NotImplementedException is thrown</param>
            <returns>FtpDataStream used for writing to the remote file. Be sure to dispose this object when done.</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenWrite(System.String,System.Boolean)">
            <summary>
            Opens a file for writing on the server
            </summary>
            <param name="path">The full or relative path of the file</param>
            <param name="append">If the file exists, append to it</param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenWrite(System.String,System.Net.FtpClient.FtpDataType,System.Boolean)">
            <summary>
            Opens a file for writing.
            </summary>
            <param name="path">The full or relative path of the file</param>
            <param name="datatype">ASCII/Binary</param>
            <param name="append">If the file exists, append to it</param>
            <returns>FtpDataStream used for writing to the remote file. Be sure to dispose this object when done.</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.OnTransferProgress(System.Net.FtpClient.FtpTransferInfo)">
            <summary>
            Fires the TransferProgress event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Download(System.String)">
            <summary>
            Downloads a file from the server to the current working directory
            </summary>
            <param name="remote">The full or relative path to the remote file</param>
            <example>
                <code source="..\Examples\Download\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Download(System.String,System.String)">
            <summary>
            Downloads a file from the server
            </summary>
            <param name="remote"></param>
            <param name="local"></param>
            <example>
                <code source="..\Examples\Download\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Download(System.String,System.IO.Stream)">
            <summary>
            Downloads a file from the server
            </summary>
            <param name="remote">The remote file to download</param>
            <param name="ostream">The stream to download the file to</param>
            <example>
                <code source="..\Examples\Download\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Download(System.String,System.String,System.Int64)">
            <summary>
            Downloads a file from the server
            </summary>
            <param name="remote">Remote path of the file</param>
            <param name="local">Local path of the file</param>
            <param name="rest">Resume location</param>
            <example>
                <code source="..\Examples\Download\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Download(System.String,System.IO.Stream,System.Int64)">
            <summary>
            Downloads a file from the server
            </summary>
            <param name="remote">Remote path of the file</param>
            <param name="ostream">The stream to download the file to</param>
            <param name="rest">Resume location</param>
            <example>
                <code source="..\Examples\Download\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Download(System.String,System.String,System.Net.FtpClient.FtpDataType)">
            <summary>
            Downloads a file from the server
            </summary>
            <param name="remote">Remote path of the file</param>
            <param name="local">Local path of the file</param>
            <param name="datatype">ASCII/Binary</param>
            <example>
                <code source="..\Examples\Download\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Download(System.String,System.IO.Stream,System.Net.FtpClient.FtpDataType)">
            <summary>
            Downloads a file from the server
            </summary>
            <param name="remote">Remote path of the file</param>
            <param name="ostream">The stream to download the file to</param>
            <param name="datatype">ASCII/Binary</param>
            <example>
                <code source="..\Examples\Download\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Download(System.String,System.String,System.Net.FtpClient.FtpDataType,System.Int64)">
            <summary>
            Downloads a file from the server
            </summary>
            <param name="remote">Remote path of the file</param>
            <param name="local">Local path of the file</param>
            <param name="datatype">ASCII/Binary</param>
            <param name="rest">Resume location</param>
            <example>
                <code source="..\Examples\Download\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Download(System.Net.FtpClient.FtpFile)">
            <summary>
            Downloads a file from the server to the current working directory
            </summary>
            <param name="remote"></param>
            <example>
                <code source="..\Examples\Download\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Download(System.Net.FtpClient.FtpFile,System.String)">
            <summary>
            Downloads a file from the server
            </summary>
            <param name="remote"></param>
            <param name="local"></param>
            <example>
                <code source="..\Examples\Download\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Download(System.Net.FtpClient.FtpFile,System.IO.Stream)">
            <summary>
            Downloads a file from the server
            </summary>
            <param name="remote"></param>
            <param name="ostream">The stream to write the file to</param>
            <example>
                <code source="..\Examples\Download\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Download(System.Net.FtpClient.FtpFile,System.String,System.Int64)">
            <summary>
            Downloads a file from the server
            </summary>
            <param name="remote">Remote path of the file</param>
            <param name="local">Local path of the file</param>
            <param name="rest">Resume location</param>
            <example>
                <code source="..\Examples\Download\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Download(System.Net.FtpClient.FtpFile,System.IO.Stream,System.Int64)">
            <summary>
            Downloads a file from the server
            </summary>
            <param name="remote">Remote path of the file</param>
            <param name="ostream">Local path of the file</param>
            <param name="rest">Resume location</param>
            <example>
                <code source="..\Examples\Download\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Download(System.Net.FtpClient.FtpFile,System.String,System.Net.FtpClient.FtpDataType)">
            <summary>
            Downloads a file from the server
            </summary>
            <param name="remote">Remote path of the file</param>
            <param name="local">Local path of the file</param>
            <param name="datatype">ASCII/Binary</param>
            <example>
                <code source="..\Examples\Download\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Download(System.Net.FtpClient.FtpFile,System.IO.Stream,System.Net.FtpClient.FtpDataType)">
            <summary>
            Downloads a file from the server
            </summary>
            <param name="remote">Remote path of the file</param>
            <param name="ostream">The stream to download the file to</param>
            <param name="datatype">ASCII/Binary</param>
            <example>
                <code source="..\Examples\Download\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Download(System.Net.FtpClient.FtpFile,System.String,System.Net.FtpClient.FtpDataType,System.Int64)">
            <summary>
            Downloads the specified file from the server
            </summary>
            <param name="remote"></param>
            <param name="local"></param>
            <param name="datatype"></param>
            <param name="rest"></param>
            <example>
                <code source="..\Examples\Download\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Download(System.Net.FtpClient.FtpFile,System.IO.Stream,System.Net.FtpClient.FtpDataType,System.Int64)">
            <summary>
            Downloads the remote file to the specified stream
            </summary>
            <param name="remote"></param>
            <param name="ostream"></param>
            <param name="datatype"></param>
            <param name="rest"></param>
            <example>
                <code source="..\Examples\Download\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Upload(System.String)">
            <summary>
            Uploads a file to the server in the current working directory
            </summary>
            <param name="local"></param>
            <example>
                <code source="..\Examples\Upload\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Upload(System.String,System.String)">
            <summary>
            Uploads a file to the server
            </summary>
            <param name="remote"></param>
            <param name="local"></param>
            <example>
                <code source="..\Examples\Upload\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Upload(System.IO.Stream,System.String)">
            <summary>
            Uploads a file to the server
            </summary>
            <param name="istream"></param>
            <param name="remote"></param>
            <example>
                <code source="..\Examples\Upload\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Upload(System.String,System.String,System.Int64)">
            <summary>
            Uploads a file to the server
            </summary>
            <param name="remote">Remote path of the file</param>
            <param name="local">Local path of the file</param>
            <param name="rest">Resume location</param>
            <example>
                <code source="..\Examples\Upload\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Upload(System.IO.Stream,System.String,System.Int64)">
            <summary>
            Uploads a file to the server
            </summary>
            <param name="istream">Stream to read the file from</param>
            <param name="remote">Remote path of the file</param>
            <param name="rest">Resume location</param>
            <example>
                <code source="..\Examples\Upload\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Upload(System.String,System.String,System.Net.FtpClient.FtpDataType)">
            <summary>
            Uploads a file to the server
            </summary>
            <param name="remote">Remote path of the file</param>
            <param name="local">Local path of the file</param>
            <param name="datatype">ASCII/Binary</param>
            <example>
                <code source="..\Examples\Upload\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Upload(System.IO.Stream,System.String,System.Net.FtpClient.FtpDataType)">
            <summary>
            Uploads a file to the server
            </summary>
            <param name="istream">The stream to read the file from</param>
            <param name="remote">Remote path of the file</param>
            <param name="datatype">ASCII/Binary</param>
            <example>
                <code source="..\Examples\Upload\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Upload(System.String,System.String,System.Net.FtpClient.FtpDataType,System.Int64)">
            <summary>
            Uploads a file to the server
            </summary>
            <param name="remote">Local path of the file</param>
            <param name="local">Remote path of the file</param>
            <param name="datatype">ASCII/Binary</param>
            <param name="rest">Resume location</param>
            <example>
                <code source="..\Examples\Upload\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Upload(System.String,System.Net.FtpClient.FtpFile)">
            <summary>
            Uploads a file to the server
            </summary>
            <param name="remote"></param>
            <param name="local"></param>
            <example>
                <code source="..\Examples\Upload\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Upload(System.IO.Stream,System.Net.FtpClient.FtpFile)">
            <summary>
            Uploads a file to the server
            </summary>
            <param name="istream">Stream to read the file from</param>
            <param name="remote"></param>
            <example>
                <code source="..\Examples\Upload\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Upload(System.String,System.Net.FtpClient.FtpFile,System.Int64)">
            <summary>
            Uploads a file to the server
            </summary>
            <param name="remote">Remote path of the file</param>
            <param name="local">Local path of the file</param>
            <param name="rest">Resume location</param>
            <example>
                <code source="..\Examples\Upload\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Upload(System.IO.Stream,System.Net.FtpClient.FtpFile,System.Int64)">
            <summary>
            Uploads a file to the server
            </summary>
            <param name="istream">The file to upload</param>
            <param name="remote">Remote path of the file</param>
            <param name="rest">Resume location</param>
            <example>
                <code source="..\Examples\Upload\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Upload(System.String,System.Net.FtpClient.FtpFile,System.Net.FtpClient.FtpDataType)">
            <summary>
            Uploads a file to the server
            </summary>
            <param name="remote">Remote path of the file</param>
            <param name="local">Local path of the file</param>
            <param name="datatype">ASCII/Binary</param>
            <example>
                <code source="..\Examples\Upload\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Upload(System.IO.Stream,System.Net.FtpClient.FtpFile,System.Net.FtpClient.FtpDataType)">
            <summary>
            Uploads a file to the server
            </summary>
            <param name="istream">The stream to upload</param>
            <param name="remote">Remote path of the file</param>
            <param name="datatype">ASCII/Binary</param>
            <example>
                <code source="..\Examples\Upload\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Upload(System.String,System.Net.FtpClient.FtpFile,System.Net.FtpClient.FtpDataType,System.Int64)">
            <summary>
            Uploads a file to the server
            </summary>
            <param name="remote">Local path of the file</param>
            <param name="local">Remote path of the file</param>
            <param name="datatype">ASCII/Binary</param>
            <param name="rest">Resume location</param>
            <example>
                <code source="..\Examples\Upload\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Upload(System.IO.Stream,System.Net.FtpClient.FtpFile,System.Net.FtpClient.FtpDataType,System.Int64)">
            <summary>
            Uploads a stream to the specified remote file
            </summary>
            <param name="istream"></param>
            <param name="remote"></param>
            <param name="datatype"></param>
            <param name="rest"></param>
            <example>
                <code source="..\Examples\Upload\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Upload(System.String,System.String,System.Boolean)">
            <summary>
            Uploads a file to the server
            </summary>
            <param name="remote">Remote path of the file</param>
            <param name="local">Local path of the file</param>
            <param name="append">Append to the remote file if it exists</param>
            <example>
                <code source="..\Examples\Upload\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Upload(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Uploads a file to the server
            </summary>
            <param name="istream">Stream to read the file from</param>
            <param name="remote">Remote path of the file</param>
            <param name="append">Append to the remote file if it exists</param>
            <example>
                <code source="..\Examples\Upload\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Upload(System.String,System.String,System.Net.FtpClient.FtpDataType,System.Boolean)">
            <summary>
            Uploads a file to the server
            </summary>
            <param name="remote">Local path of the file</param>
            <param name="local">Remote path of the file</param>
            <param name="datatype">ASCII/Binary</param>
            <param name="append">Append to the remote file if it exists</param>
            <example>
                <code source="..\Examples\Upload\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Upload(System.String,System.Net.FtpClient.FtpFile,System.Boolean)">
            <summary>
            Uploads a file to the server
            </summary>
            <param name="remote">Remote path of the file</param>
            <param name="local">Local path of the file</param>
            <param name="append">Append to the remote file if it exists</param>
            <example>
                <code source="..\Examples\Upload\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Upload(System.IO.Stream,System.Net.FtpClient.FtpFile,System.Boolean)">
            <summary>
            Uploads a file to the server
            </summary>
            <param name="istream">The file to upload</param>
            <param name="remote">Remote path of the file</param>
            <param name="append">Append to the remote file if it exists</param>
            <example>
                <code source="..\Examples\Upload\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Upload(System.String,System.Net.FtpClient.FtpFile,System.Net.FtpClient.FtpDataType,System.Boolean)">
            <summary>
            Uploads a file to the server
            </summary>
            <param name="remote">Local path of the file</param>
            <param name="local">Remote path of the file</param>
            <param name="datatype">ASCII/Binary</param>
            <param name="append">Append to the remote file if it exists</param>
            <example>
                <code source="..\Examples\Upload\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.Upload(System.IO.Stream,System.Net.FtpClient.FtpFile,System.Net.FtpClient.FtpDataType,System.Boolean)">
            <summary>
            Uploads a stream to the specified remote file
            </summary>
            <param name="istream"></param>
            <param name="remote"></param>
            <param name="datatype"></param>
            <param name="append"></param>
            <example>
                <code source="..\Examples\Upload\Program.cs" lang="cs"></code>
            </example>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.#ctor">
            <summary>
            Creates a new isntance of an FtpClient
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.#ctor(System.String,System.String)">
            <summary>
            Creates a new isntance of an FtpClient
            </summary>
            <param name="username"></param>
            <param name="password"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new isntance of an FtpClient
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <param name="server"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Creates a new isntance of an FtpClient
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <param name="server"></param>
            <param name="port"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpClient.#ctor(System.Uri)">
            <summary>
            Initalizes a new FtpClient object based on the given URI
            </summary>
            <param name="uri">URI to parse</param>
        </member>
        <member name="E:System.Net.FtpClient.FtpClient.TransferProgress">
            <summary>
            Event fired from Download() and Upload() methods
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpClient.UseAppendForUploadResume">
            <summary>
            Some servers do not allow specifying an upload starting point
            with REST + STOR, instead they only support the use of the APPE
            command. Set this property to true to force the use of the APPE
            command for upload resume. Some systems are automatically detected
            such as Windows_NT (IIS FTP) and OS/400.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpClient.CurrentDirectory">
            <summary>
            Gets the current working directory. Use the SetWorkingDirectory() method
            to change the working directory.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpClient.System">
            <summary>
            Gets the system type that we're connected to
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpActiveStream">
            <summary>
            FtpDataStream setup for active mode transfers
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpDataStream">
            <summary>
            Stream for reading and writing FTP data channels
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpDataStream.CheckCertificate(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            Checks if a certificate is valid
            </summary>
            <param name="sender"></param>
            <param name="certificate"></param>
            <param name="chain"></param>
            <param name="sslPolicyErrors"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpDataStream.Authenticate">
            <summary>
            Validates the SSL certificate if security is in use
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpDataStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes to the stream. If the transfer mode is block
            a block header is encoded and sent with the data.
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpDataStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read bytes off the data stream
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpDataStream.ReadLine">
            <summary>
            Reads a line off the data stream
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpDataStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpDataStream.Seek(System.Int64)">
            <summary>
            Seek the stream to the specified position
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpDataStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Uses the REST command to set the stream position in stream
            mode transfers. If the transfer has started an exception
            will be triggered because REST cannot be executed once data
            has been exchanged.
            </summary>
            <param name="offset"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpDataStream.Flush">
            <summary>
            Flushes the base stream
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpDataStream.Close">
            <summary>
            Closes the base stream and reads the response
            status of the transfer if necessary.
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpDataStream.Dispose">
            <summary>
            Cleans up the resources this stream is using.
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpDataStream.Open">
            <summary>
            Opens the stream
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpDataStream.Open(System.Net.FtpClient.FtpDataChannelType)">
            <summary>
            Sets up sockets and executes necessary commands to initalize
            a data transfer.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpDataStream.Execute(System.String,System.Object[])">
            <summary>
            Executes a command on the control channel
            </summary>
            <param name="command"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpDataStream.Execute(System.String)">
            <summary>
            Executes a command on the control channel
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpDataStream.#ctor">
            <summary>
            Stream for reading and writing to ftp data channels
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpDataStream.ControlConnection">
            <summary>
            Command channel this data stream is associated with
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpDataStream.TransferStarted">
            <summary>
            Gets a value indicating if the transfer has started.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpDataStream.LastNoOp">
            <summary>
            Gets or sets the last time the NOOP command was
            executed on the server
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpDataStream.ReceiveBufferSize">
            <summary>
            Gets the receive buffer size of the underlying socket
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpDataStream.SendBufferSize">
            <summary>
            Gets the send buffer size of the underlying socket
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpDataStream.Socket">
            <summary>
            Socket used for communication
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpDataStream.NetworkStream">
            <summary>
            Base unencrypted network stream
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpDataStream.SecureStream">
            <summary>
            SSL Encrypted stream for ssl use
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpDataStream.BaseStream">
            <summary>
            Base stream
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpDataStream.StreamReader">
            <summary>
            Gets a stream reader object
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpDataStream.ReadTimeout">
            <summary>
            Gets or sets the length of time in miliseconds that this stream will
            attempt to read from the underlying socket before giving up. The default
            value of -1 means wait indefinitely.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpDataStream.Length">
            <summary>
            Gets the length of the stream
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpDataStream.Position">
            <summary>
            Gets or sets the position in the stream. Once a transfer
            has started, the position cannot be modified. If an attempt
            is made an exception will be thrown.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpDataStream.CanSeek">
            <summary>
            Gets a value indicating if this stream is seekable. 
            If you are doing a stream mode transfer and the transfer has not
            yet started you can use seeking to resume your transfer.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpDataStream.CanRead">
            <summary>
            Gets a value indicating if this stream can be read
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpDataStream.CanWrite">
            <summary>
            Gets a value indicating if this stream can be
            written to.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpDataStream.SslEnabled">
            <summary>
            Gets a value indicating if encryption is in use
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpDataStream.SslPolicyErrors">
            <summary>
            Gets the SSL errors if there were any
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpDataStream.SslCertificate">
            <summary>
            Gets the certificate associated with the current connection
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpActiveStream.Execute(System.String)">
            <summary>
            Executes the specified command on the control connection
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpActiveStream.Accept">
            <summary>
            Accepts the incomming connection
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpActiveStream.Open(System.Net.FtpClient.FtpDataChannelType)">
            <summary>
            Opens the specified type of active data stream
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpActiveStream.#ctor(System.Net.FtpClient.FtpControlConnection)">
            <summary>
            Initalizes a new instance of an active ftp data stream
            </summary>
            <param name="chan"></param>
        </member>
        <member name="T:System.Net.FtpClient.Proxy.Socks4Proxy">
            <summary>
            Implements the SOCKS4 protocol.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.Proxy.Socks4Proxy.Socks4VersionNumber">
            <summary>
            The SOCKS4 version number.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.Proxy.Socks4Proxy.Socks4ConnectCommand">
            <summary>
            The SOCKS4 connect command value.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.Proxy.Socks4Proxy.Socks4CommandSucceed">
            <summary>
            The SOCKS4 connect command succeed value.
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.Proxy.Socks4Proxy.#ctor(System.Net.Sockets.Socket,System.String)">
            <summary>
            Initializes a new instance of the Socks4Proxy class.
            </summary>
            <param name="socket">The socket connection with the proxy server.</param>
            <param name="username">The username used to connect to the proxy server.</param>
        </member>
        <member name="M:System.Net.FtpClient.Proxy.Socks4Proxy.Connect(System.String,System.Int32)">
            <summary>
            Connects to the remote host through the SOCKS proxy server.
            </summary>
            <param name="host">The remote server to connect to.</param>
            <param name="port">The remote port to connect to.</param>
        </member>
        <member name="M:System.Net.FtpClient.Proxy.Socks4Proxy.Connect(System.Byte[])">
            <summary>
            Connects to the remote host through the SOCKS proxy server.
            </summary>
            <param name="connect">The bytes to send when trying to connect.</param>
        </member>
        <member name="M:System.Net.FtpClient.Proxy.Socks4Proxy.GetHostBytes(System.String)">
            <summary>
            Converts an IP address to an array of bytes.
            </summary>
            <param name="host">The host name or IP address to convert.</param>
            <returns>An array of bytes representing the IP address.</returns>
        </member>
        <member name="M:System.Net.FtpClient.Proxy.Socks4Proxy.GetConnectCommand(System.String,System.Int32)">
            <summary>
            Creates an array of bytes representing the SOCKS4 proxy server connect command.
            See http://ftp.icm.edu.pl/packages/socks/socks4/SOCKS4.protocol
            </summary>
            <param name="host">The host name or IP address to connect to.</param>
            <param name="port">The port number to connect to.</param>
            <returns>An array of bytes representing the connect command for the specified host/port combination.</returns>
        </member>
        <member name="T:System.Net.FtpClient.FtpException">
            <summary>
            FTP related error
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpException.#ctor(System.String)">
            <summary>
            Initializes the exception object
            </summary>
            <param name="message">The error message</param>
        </member>
        <member name="T:System.Net.FtpClient.FtpCommandException">
            <summary>
            Exception triggered on command failures
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandException.#ctor(System.String,System.String)">
            <summary>
            Initalizes a new instance of a FtpResponseException
            </summary>
            <param name="code">Status code</param>
            <param name="message">Associated message</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandException.#ctor(System.Net.FtpClient.FtpControlConnection)">
            <summary>
            Initalizes a new instance of a FtpResponseException
            </summary>
            <param name="chan"></param>
        </member>
        <member name="P:System.Net.FtpClient.FtpCommandException.CompletionCode">
            <summary>
            Gets the completion code associated with the response
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpCommandException.ResponseType">
            <summary>
            The type of response received from the last command executed
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpInvalidCertificateException">
            <summary>
            Error validating the SSL certificate of an FTP server
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpInvalidCertificateException.#ctor(System.String)">
            <summary>
            Initializes the exception object
            </summary>
            <param name="message">The error message</param>
        </member>
        <member name="T:System.Net.FtpClient.FtpResponseTimeoutException">
            <summary>
            Error reading the response from the server
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpResponseTimeoutException.#ctor(System.String)">
            <summary>
            Initialize the exception object
            </summary>
            <param name="message">The error message</param>
        </member>
        <member name="T:System.Net.FtpClient.FtpListItem">
            <summary>
            Parses MLST/MLSD and LIST formats
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpListItem.ParseListListing(System.String)">
            <summary>
            Parses DOS and UNIX LIST style listings
            </summary>
            <param name="listing"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpListItem.Parse(System.String,System.Net.FtpClient.FtpListType)">
            <summary>
            Parses a given listing
            </summary>
            <param name="listing">The single line that needs to be parsed</param>
            <param name="type">The command that generated the line to be parsed</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpListItem.ToString">
            <summary>
            Returns a text representation of this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpListItem.#ctor">
            <summary>
            Initializes an empty parser
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpListItem.#ctor(System.Net.FtpClient.FtpListFormatParser)">
            <summary>
            Initializes a new FtpListItem object from a parser's results.
            </summary>
            <param name="parser"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpListItem.#ctor(System.String,System.Net.FtpClient.FtpListType)">
            <summary>
            Parses a given listing
            </summary>
            <param name="listing">The single line that needs to be parsed</param>
            <param name="type">The command that generated the line to be parsed</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpListItem.#ctor(System.String[],System.Net.FtpClient.FtpListType)">
            <summary>
            Parses a given listing
            </summary>
            <param name="listing"></param>
            <param name="type"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpListItem.ParseList(System.String[],System.Net.FtpClient.FtpListType)">
            <summary>
            Parses an array of list results
            </summary>
            <param name="items">Array of list results</param>
            <param name="type">The command that generated the list being parsed</param>
            <returns></returns>
        </member>
        <member name="P:System.Net.FtpClient.FtpListItem.Type">
            <summary>
            Gets the type of object (File/Directory/Unknown)
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListItem.Name">
            <summary>
            The file/directory name from the listing
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListItem.Size">
            <summary>
            The file size from the listing, default -1
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListItem.Mode">
            <summary>
            The file mode from the listing, default 0000
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListItem.Modify">
            <summary>
            The last write time from the listing
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListItem.Owner">
            <summary>
            The file's owner from the listing
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListItem.Group">
            <summary>
            The file's group from the listing
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpListItem.LinkPath">
            <summary>
            The file's link path, if it is a symlink.
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpSecurityNotAvailable">
            <summary>
            SecurityNotAvailable event args
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpSecurityNotAvailable.#ctor(System.Net.FtpClient.FtpControlConnection)">
            <summary>
            Initalizes an instance of FtpSecurityNotAvailable event args
            </summary>
            <param name="conn"></param>
        </member>
        <member name="P:System.Net.FtpClient.FtpSecurityNotAvailable.Connection">
            <summary>
            The connection that triggered the event
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpSecurityNotAvailable.Cancel">
            <summary>
            Get or set a value indicating if the connection should be aborted
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpCommandResult">
            <summary>
            The information returned from the server for a given command.
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpCommandResult.#ctor(System.Net.FtpClient.FtpControlConnection)">
            <summary>
            Initalize object
            </summary>
            <param name="chan">The command channel this object is associated with</param>
        </member>
        <member name="P:System.Net.FtpClient.FtpCommandResult.ResponseType">
            <summary>
            The type of response received from the last command executed
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpCommandResult.ResponseCode">
            <summary>
            The status code of the response
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpCommandResult.ResponseMessage">
            <summary>
            The message, if any, that the server sent with the response
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpCommandResult.Messages">
            <summary>
            Other informational messages sent from the server
            that are not considered part of the response
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpCommandResult.ResponseStatus">
            <summary>
            General success or failure of the last command executed
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.Proxy.Socks4AProxy">
            <summary>
            Implements the SOCKS4A protocol.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.Proxy.Socks4AProxy.Socks4AVersionNumber">
            <summary>
            The SOCKS4A version number.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.Proxy.Socks4AProxy.Socks4AConnectCommand">
            <summary>
            The SOCKS4A connect command value.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.Proxy.Socks4AProxy.Socks4ACommandSucceed">
            <summary>
            The SOCKS4A connect command succeed value.
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.Proxy.Socks4AProxy.#ctor(System.Net.Sockets.Socket,System.String)">
            <summary>
            Initializes a new instance of the Socks4AProxy class.
            </summary>
            <param name="socket">The socket connection with the proxy server.</param>
            <param name="username">The username used to connect to the proxy server.</param>
        </member>
        <member name="M:System.Net.FtpClient.Proxy.Socks4AProxy.Connect(System.String,System.Int32)">
            <summary>
            Connects to the remote host through the SOCKS proxy server.
            </summary>
            <param name="host">The remote server to connect to.</param>
            <param name="port">The remote port to connect to.</param>
        </member>
        <member name="M:System.Net.FtpClient.Proxy.Socks4AProxy.Connect(System.Byte[])">
            <summary>
            Connects to the remote host through the SOCKS proxy server.
            </summary>
            <param name="connect">The bytes to send when trying to connect.</param>
        </member>
        <member name="M:System.Net.FtpClient.Proxy.Socks4AProxy.GetConnectCommand(System.String,System.Int32)">
            <summary>
            Creates an array of bytes representing the SOCKS4A proxy server connect command.
            See http://ss5.sourceforge.net/socks4A.protocol.txt
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port number to connect to.</param>
            <returns>An array of bytes representing the connect command for the specified host/port combination.</returns>
        </member>
        <member name="T:System.Net.FtpClient.Proxy.ProxySocket">
            <summary>
            Implements a Socket class that can connect through a proxy server.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.Proxy.ProxySocket.proxyEndPoint">
            <summary>
            The proxy server endpoint value.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.Proxy.ProxySocket.proxyType">
            <summary>
            The proxy server type value.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.Proxy.ProxySocket.proxyUsername">
            <summary>
            The username used to connect to the proxy server.
            </summary>
        </member>
        <member name="F:System.Net.FtpClient.Proxy.ProxySocket.proxyPassword">
            <summary>
            The password used to connect to the proxy server.
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.Proxy.ProxySocket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
            <summary>
            Initializes a new instance of the ProxySocket class.
            </summary>
            <param name="addressFamily">One of the AddressFamily values.</param>
            <param name="socketType">One of the SocketType values.</param>
            <param name="protocolType">One of the ProtocolType values.</param>
        </member>
        <member name="M:System.Net.FtpClient.Proxy.ProxySocket.Connect(System.String,System.Int32)">
            <summary>
            Establishes a connection to a remote host. The host is specified by an IP address and a port number.
            </summary>
            <param name="host">The IP address of the remote host.</param>
            <param name="port">The port number of the remote host.</param>
        </member>
        <member name="P:System.Net.FtpClient.Proxy.ProxySocket.ProxyEndPoint">
            <summary>
            Gets or sets the ProxyEndPoint.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.Proxy.ProxySocket.ProxyType">
            <summary>
            Gets or sets the ProxyType.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.Proxy.ProxySocket.ProxyUsername">
            <summary>
            Gets or sets the proxy server username.
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.Proxy.ProxySocket.ProxyPassword">
            <summary>
            Gets or sets the proxy server password.
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpPassiveStream">
            <summary>
            FtpDataStream object setup for passive mode transfers
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpPassiveStream.Execute(System.String)">
            <summary>
            Executes the sepcified command on the control connection
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpPassiveStream.Open(System.Net.FtpClient.FtpDataChannelType)">
            <summary>
            Open the specified type of passive stream
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpPassiveStream.#ctor(System.Net.FtpClient.FtpControlConnection)">
            <summary>
            Initalizes a new instance of passive data stream
            </summary>
            <param name="chan"></param>
        </member>
        <member name="T:System.Net.FtpClient.FtpFileSystemObjectList`1">
            <summary>
            List of FtpFileSystemObject's
            </summary>
            <typeparam name="FtpFileSystemObject">FtpFile / FtpDirectory</typeparam>
        </member>
        <member name="M:System.Net.FtpClient.FtpFileSystemObjectList`1.GetEnumerator">
            <summary>
            Gets an enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpFileSystemObjectList`1.ToArray">
            <summary>
            Returns an array of objects contained in this list
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpFileSystemObjectList`1.Add(`0)">
            <summary>
            Adds the specified object to the list
            </summary>
            <param name="fso"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpFileSystemObjectList`1.Remove(`0)">
            <summary>
            Remove the specified object from the list
            </summary>
            <param name="fso"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpFileSystemObjectList`1.Contains(`0)">
            <summary>
            Checks if the specified object exists.
            </summary>
            <param name="fso"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpFileSystemObjectList`1.Clear">
            <summary>
            Clear the list
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpFileSystemObjectList`1.Count">
            <summary>
            Gets the number of objects in this list
            </summary>
        </member>
        <member name="T:System.Net.FtpClient.FtpFile">
            <summary>
            A file on a FTP server
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.OpenRead">
            <summary>
            Opens this file for reading
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.OpenRead(System.Int64)">
            <summary>
            Opens this file for reading
            </summary>
            <param name="rest"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.OpenRead(System.Net.FtpClient.FtpDataType)">
            <summary>
            Opens this file for reading
            </summary>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.OpenRead(System.Net.FtpClient.FtpDataType,System.Int64)">
            <summary>
            Opens this file for reading
            </summary>
            <param name="mode"></param>
            <param name="rest"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.OpenWrite">
            <summary>
            Opens this file for writing
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.OpenWrite(System.Int64)">
            <summary>
            Opens this file for writing
            </summary>
            <param name="rest"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.OpenWrite(System.Net.FtpClient.FtpDataType)">
            <summary>
            Opens this file for writing
            </summary>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.OpenWrite(System.Net.FtpClient.FtpDataType,System.Int64)">
            <summary>
            Opens this file for writing
            </summary>
            <param name="mode"></param>
            <param name="rest"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.Open(System.Net.FtpClient.FtpFileAccess)">
            <summary>
            Opens a stream to this file on the server
            </summary>
            <param name="access">Read, write or append. If append, offset parameter is ignored.</param>
            <returns>A stream to the file.</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.Open(System.Net.FtpClient.FtpDataType,System.Net.FtpClient.FtpFileAccess)">
            <summary>
            Opens a stream to this file on the server
            </summary>
            <param name="type">ASCII/Binary</param>
            <param name="access">Read, write or append. If append, offset parameter is ignored.</param>
            <returns>A stream to the file.</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.Open(System.Net.FtpClient.FtpFileAccess,System.Int64)">
            <summary>
            Opens a stream to this file on the server
            </summary>
            <param name="access">Read, write or append. If append, offset parameter is ignored.</param>
            <param name="offset">Starting position of the stream, ignored if access type is append.</param>
            <returns>A stream to the file.</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.Open(System.Net.FtpClient.FtpDataType,System.Net.FtpClient.FtpFileAccess,System.Int64)">
            <summary>
            Opens a stream to this file on the server
            </summary>
            <param name="type">ASCII/Binary</param>
            <param name="access">Read, write or append. If append, offset parameter is ignored.</param>
            <param name="offset">Starting position of the stream, ignored if access type is append.</param>
            <returns>A stream to the file.</returns>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.Download">
            <summary>
            Download this file to the current working directory
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.Download(System.String)">
            <summary>
            Download this file
            </summary>
            <param name="local">Local path</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.Download(System.String,System.Int64)">
            <summary>
            Download this file
            </summary>
            <param name="local">Local path</param>
            <param name="rest">Restart position</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.Download(System.String,System.Net.FtpClient.FtpDataType)">
            <summary>
            Download this file
            </summary>
            <param name="local">Local path</param>
            <param name="datatype">ASCII/Binary</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.Download(System.String,System.Net.FtpClient.FtpDataType,System.Int64)">
            <summary>
            Download this file
            </summary>
            <param name="local">Local path</param>
            <param name="datatype">ASCII/Binary</param>
            <param name="rest">Restart location</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.Upload(System.String)">
            <summary>
            Uploads the specified file
            </summary>
            <param name="local"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.Upload(System.String,System.Int64)">
            <summary>
            Uploads the specified file 
            </summary>
            <param name="local"></param>
            <param name="rest"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.Upload(System.String,System.Net.FtpClient.FtpDataType)">
            <summary>
            Uploads the specified file
            </summary>
            <param name="local"></param>
            <param name="datatype"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.Upload(System.String,System.Net.FtpClient.FtpDataType,System.Int64)">
            <summary>
            Uploads the specified file
            </summary>
            <param name="local"></param>
            <param name="datatype"></param>
            <param name="rest"></param>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.Delete">
            <summary>
            Delete this file
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.Dispose">
            <summary>
            Cleans up this object's resources
            </summary>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.#ctor(System.Net.FtpClient.FtpClient,System.String)">
            <summary>
            Constructs a new FtpFile object
            </summary>
            <param name="cl">The FtpClient to associate this FtpFile with</param>
            <param name="path">The remote path to the file</param>
        </member>
        <member name="M:System.Net.FtpClient.FtpFile.#ctor(System.Net.FtpClient.FtpClient,System.Net.FtpClient.FtpDirectory,System.Net.FtpClient.FtpListItem)">
            <summary>
            Constructs a new FtpFile object
            </summary>
            <param name="cl">The FtpClient to associate this FtpFile with</param>
            <param name="parent">The parent FtpDirectory if any</param>
            <param name="listing">The FtpListItem object that was acquired from parsing flie list from the server.</param>
        </member>
        <member name="P:System.Net.FtpClient.FtpFile.Exists">
            <summary>
            Gets a value indicating if this file exists on the server
            </summary>
        </member>
        <member name="P:System.Net.FtpClient.FtpFile.Parent">
            <summary>
            Gets the parent directory.
            </summary>
        </member>
    </members>
</doc>
